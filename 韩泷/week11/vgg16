import torch
import torchvision.transforms as transforms
from torchvision import models
from PIL import Image
import numpy as np

def load_image(path):
    # 读取图片并转为RGB
    img = Image.open(path).convert('RGB')
    return img

def preprocess_image(image):
    # 定义预处理步骤
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    image = transform(image)
    image = image.unsqueeze(0)  # 添加一个维度以匹配模型输入
    return image

def print_prob(prob, file_path):
    synset = [l.strip() for l in open(file_path).readlines()]
    # 将概率从大到小排列的结果的序号存入pred
    pred = np.argsort(prob)[::-1]
    # 取最大的1个、5个
    top1 = synset[pred[0]]
    print("Top1: ", top1, prob[pred[0]])
    top5 = [(synset[pred[i]], prob[pred[i]]) for i in range(5)]
    print("Top5: ", top5)
    return top1

# 加载预训练的 VGG16 模型
model = models.vgg16(pretrained=True)
model.eval()  # 设置模型为评估模式

# 读取并预处理图片
img1 = load_image("./test_data/table.jpg")
input_image = preprocess_image(img1)

# 进行预测
with torch.no_grad():  # 不需要计算梯度
    output = model(input_image)
    prob = torch.nn.functional.softmax(output[0], dim=0)  # 计算softmax
    
# 打印预测结果
print("result: ")
print_prob(prob.numpy(), './synset.txt')
